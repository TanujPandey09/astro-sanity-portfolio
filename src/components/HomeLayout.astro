---
import { useSanityClient, groq } from "astro-sanity";
import BlogSlider from "../components/Slider/BlogSlider.jsx";
import ProjectSlider from "../components/Slider/ProjectSlider";
import { ViewTransitions } from "astro:transitions";
import { fade } from "astro:transitions";
import { Icon } from "astro-icon/components";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import AIChatbot from "./AiChatbot";

const props = Astro.props;

const query = groq`*[_type == "projects"]{
        ...,
        BackgroundImage{
      asset->{
        url
      }
      },
    }`;

const blogquery = groq`*[_type == "blogs"]{
       ...,
       FeatureImage{
      asset->{
        url
      }},
    }`;

const projectData = await useSanityClient().fetch(query);
const blogData = await useSanityClient().fetch(blogquery);

const experienceData = [
  {
    role: "Frontend Developer",
    company: "Nasyat IT",
    duration: "Feb 2025 - July 2025",
    type: "Remote",
    companyUrl: "https://www.nasyait.com/",
    description:
      "Developed a complete Hospital Management System using React.js, Material UI, and React Native. Built appointment booking, case sheet, and reports modules. Integrated REST APIs with Axios, improving performance by 20%. Handled UI and testing across web and mobile platforms.",
    technologies: [
      { name: "React.js", color: "bg-blue-500" },
      { name: "Material UI", color: "bg-green-500" },
      { name: "React Native", color: "bg-indigo-500" },
      { name: "Axios", color: "bg-yellow-500" },
      { name: "REST API", color: "bg-rose-500" },
    ],
    logo: "https://media.licdn.com/dms/image/v2/C4D0BAQHRS2pkyIQ-RQ/company-logo_200_200/company-logo_200_200/0/1630577732820/nasyait_logo?e=1757548800&v=beta&t=o5O7fEsY1W_lgo6059sqkgNCqnY9zJjWgWlWm2UlGLQ",
  },
  {
    role: "React Developer",
    company: "Techmatys",
    duration: "May 2024 - June 2024",
    type: "Onsite",
    companyUrl: "https://www.scube.co/",
    description:
      "Developed a modern LMS Dashboard using React.js, Ant Design, and React Router. Improved UI/UX accessibility, collaborated with cross-functional teams, and optimized reusable UI components for scalability.",
    technologies: [
      { name: "React.js", color: "bg-blue-500" },
      { name: "Ant Design", color: "bg-teal-500" },
      { name: "React Router", color: "bg-fuchsia-500" },
      { name: "JavaScript", color: "bg-yellow-400" },
    ],
    logo: "/img/techmatys.jfif",
  },
  {
    role: "Frontend Developer",
    company: "Scube.co",
    duration: "Dec 2021 - Feb 2024",
    type: "Remote",
    companyUrl: "https://www.scube.co/",
    description:
      "Led frontend development for a suite of CRUD web apps and CMS-integrated websites. Built scalable UI with Next.js and React.js, integrated Sanity & Contentful headless CMS, and implemented dynamic layouts with multilingual support.",
    technologies: [
      { name: "React.js", color: "bg-blue-500" },
      { name: "Next.js", color: "bg-slate-800" },
      { name: "Tailwind CSS", color: "bg-teal-400" },
      { name: "Sanity", color: "bg-pink-500" },
      { name: "Contentful", color: "bg-gray-600" },
      { name: "MUI", color: "bg-violet-500" },
      { name: "Headless CMS", color: "bg-cyan-600" },
    ],
    logo: "/img/SCUBE.webp",
  },
];

// Enhanced skills data
const skillsData = [
  { name: "React.js", level: 95, category: "frontend" },
  { name: "Next.js", level: 90, category: "frontend" },
  { name: "TypeScript", level: 85, category: "language" },
  { name: "JavaScript", level: 95, category: "language" },
  { name: "Tailwind CSS", level: 90, category: "styling" },
  { name: "Node.js", level: 80, category: "backend" },
  { name: "MongoDB", level: 75, category: "database" },
  { name: "Git", level: 90, category: "tools" },
];

const achievements = [
  { number: "50+", label: "Projects Completed", icon: "üöÄ" },
  { number: "3+", label: "Years Experience", icon: "‚è∞" },
  { number: "20%", label: "Performance Improvement", icon: "üìà" },
  { number: "100%", label: "Client Satisfaction", icon: "‚≠ê" },
];
---

<!-- Enhanced Background with animated gradient -->
<div
  class="fixed inset-0 -z-10 bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 animate-gradient-shift"
>
</div>
<div class="fixed inset-0 -z-10 opacity-50">
  <div
    class="absolute inset-0 bg-[url('/img/grid.svg')] bg-center [mask-image:linear-gradient(180deg,white,rgba(255,255,255,0))]"
  >
  </div>
</div>

<section
  class="home-section px-4 font-Roboto min-h-screen w-auto relative overflow-hidden"
>
  <!-- Floating particles background -->
  <div class="particles-container fixed inset-0 -z-10">
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
  </div>

  <div class="container mx-auto relative z-10">
    <!-- Enhanced Hero Section -->
    <div class="grid grid-cols-1 md:gap-2 gap-12 text-center justify-center">
      <div
        class="text-primaryColor about_section flex flex-col items-center justify-center p-4 lg:p-24 m-4 lg:m-10 font-Roboto animate-hero-entrance"
      >
        <!-- Profile Image with enhanced styling -->
        <div class="profile-image-container mb-8 animate-float">
          <div class="profile-ring"></div>
          <img
            src="/public/img/profile.jpg"
            alt="Tanuj Pandey"
            class="profile-image w-32 h-32 lg:w-40 lg:h-40 rounded-full object-cover border-4 border-white/20 shadow-2xl"
          />
        </div>

        <h1
          class="text-2xl lg:text-5xl py-2 animate-slideDown bg-gradient-to-r from-white via-blue-200 to-purple-200 bg-clip-text text-transparent font-bold"
        >
          Hi, I am <span class="text-gradient">Tanuj Pandey</span>
        </h1>

        <div class="typing-container py-4">
          <p
            class="text-sm lg:text-xl py-1 lg:px-28 animate-slideUp text-gray-300 leading-relaxed"
          >
            A Result-Oriented <span
              class="text-blue-400 font-semibold typing-text"
              >Web Developer</span
            > building and managing
            <br class="hidden lg:block" />
            Websites and Web Applications that lead to the success of the overall
            product
          </p>
        </div>

        <!-- Enhanced CTA buttons -->
        <div class="flex flex-col sm:flex-row gap-4 mt-8">
          <button
            type="button"
            class="btn-primary-enhanced group"
            onclick="downloadResume()"
          >
            <span class="relative z-10">Get Resume</span>
            <div class="btn-glow"></div>
          </button>

          <a href="#contact" class="btn-secondary-enhanced group">
            <span class="relative z-10">Let's Talk</span>
          </a>
        </div>

        <!-- Social links with enhanced styling -->
        <div class="social-links flex gap-6 mt-8">
          <a href="https://github.com/TanujPandey09" class="social-icon group">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
              <path
                d="M12 0C5.374 0 0 5.373 0 12 0 17.302 3.438 21.8 8.207 23.387c.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z"
              ></path>
            </svg>
          </a>
          <a href="https://www.linkedin.com/in/tanujdev/" class="social-icon group">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
              <path
                d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433a2.062 2.062 0 01-2.063-2.065 2.064 2.064 0 112.063 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
              ></path>
            </svg>
          </a>
          <a href="https://x.com/home" class="social-icon group">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
              <path
                d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"
              ></path>
            </svg>
          </a>
        </div>
      </div>
    </div>

    <!-- Enhanced Achievement Stats -->
    <div class="achievements-section py-16 animate-fadeIn">
      <div class="grid grid-cols-2 lg:grid-cols-4 gap-6">
        {
          achievements.map((achievement, index) => (
            <div
              class={`achievement-card animate-slideIn animate-delay-${index}`}
            >
              <div class="text-4xl mb-2">{achievement.icon}</div>
              <div
                class="text-2xl lg:text-3xl font-bold text-white mb-1 counter"
                data-target={achievement.number.replace(/[^\d]/g, "")}
              >
                {achievement.number}
              </div>
              <div class="text-gray-400 text-sm">{achievement.label}</div>
            </div>
          ))
        }
      </div>
    </div>

    <!-- Enhanced Skills Section -->
    <div class="skills-section py-16 animate-fadeIn">
      <h2
        class="text-white text-2xl lg:text-4xl font-bold text-center mb-12 animate-slideDown"
      >
        Technical Skills
      </h2>

      <div class="skills-grid">
        {
          skillsData.map((skill, index) => (
            <div
              class={`skill-card animate-slideIn animate-delay-${index % 4}`}
            >
              <div class="skill-header">
                <span class="skill-name">{skill.name}</span>
                <span class="skill-percentage">{skill.level}%</span>
              </div>
              <div class="skill-bar">
                <div
                  class="skill-progress"
                  style={`--skill-width: ${skill.level}%`}
                />
              </div>
            </div>
          ))
        }
      </div>
    </div>

    <!-- Enhanced Experience Section -->
    <div class="experience-section h-auto animate-fadeIn py-16">
      <h2
        class="text-white text-2xl lg:text-4xl font-bold mb-12 animate-slideDown text-center"
      >
        Professional Experience
      </h2>

      <div class="experience-timeline">
        {
          experienceData.map((experience, index) => (
            <div class={`timeline-item animate-slideIn animate-delay-${index}`}>
              <div class="timeline-marker" />
              <div class="experience-card group">
                <div class="experience-header">
                  <div class="company-logo">
                    <img
                      src={experience.logo}
                      alt={experience.company}
                      class="w-12 h-12 object-contain rounded-lg"
                    />
                  </div>
                  <div class="experience-info">
                    <h3 class="text-xl font-bold text-white">
                      {experience.role}
                    </h3>
                    <p class="text-blue-400 font-medium">
                      {experience.company}
                    </p>
                    <p class="text-gray-400 text-sm">
                      {experience.duration} ‚Ä¢ {experience.type}
                    </p>
                  </div>
                  <button
                    class="expand-btn"
                    onclick={`toggleExperience(${index})`}
                  >
                    <svg
                      width="20"
                      height="20"
                      viewBox="0 0 24 24"
                      fill="none"
                      class="transition-transform duration-300"
                    >
                      <path
                        d="M6 9l6 6 6-6"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>

                <div class="experience-content" id={`content-${index}`}>
                  <p class="text-gray-300 mb-4">{experience.description}</p>
                  <div class="technologies-grid">
                    {experience.technologies.map((tech) => (
                      <span class={`tech-badge ${tech.color}`}>
                        {tech.name}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>

    <!-- Enhanced Projects Section -->
    <div
      class="projects_section py-16 container mx-auto w-auto text-white animate-fadeIn"
    >
      <div class="section-header">
        <h2 class="section-title animate-slideDown">My Works</h2>
        <a href="/projects" class="view-all-link">
          View All
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
            <path
              d="M5 12h14m-7-7l7 7-7 7"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"></path>
          </svg>
        </a>
      </div>
      <div class="animate-slideUp">
        <ProjectSlider projectData={projectData} client:only />
      </div>
    </div>

    <!-- Enhanced Blogs Section -->
    <div class="blogs py-16 container mx-auto text-white w-auto animate-fadeIn">
      <div class="section-header">
        <h2 class="section-title animate-slideDown">Latest Blogs</h2>
        <a href="/blogs" class="view-all-link">
          View All
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
            <path
              d="M5 12h14m-7-7l7 7-7 7"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"></path>
          </svg>
        </a>
      </div>
      <div class="animate-slideUp">
        <BlogSlider blogData={blogData} client:only />
      </div>
    </div>

    <!-- Enhanced Contact Section -->
    <div class="contact-section py-16" id="contact">
      <div class="contact-card">
        <h2 class="text-2xl lg:text-4xl font-bold text-white text-center mb-8">
          Let's Work Together
        </h2>
        <p class="text-gray-300 text-center mb-8 max-w-2xl mx-auto">
          Have a project in mind? Let's discuss how we can bring your ideas to
          life with cutting-edge web technologies.
        </p>
        <div class="flex justify-center">
          <a href="mailto:tanuj@example.com" class="btn-primary-enhanced group">
            <span class="relative z-10">Start a Project</span>
            <div class="btn-glow"></div>
          </a>
        </div>
      </div>
    </div>
  </div>
</section>

<section>
  <div>
    <AIChatbot client:only />
  </div>
</section>

<style>
  /* Enhanced CSS Variables */
  :root {
    --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    --card-bg: rgba(30, 41, 59, 0.8);
    --card-border: rgba(255, 255, 255, 0.1);
    --glass-bg: rgba(255, 255, 255, 0.05);
    --text-gradient: linear-gradient(135deg, #667eea, #764ba2, #f093fb);
  }

  /* Background Animations */
  @keyframes gradient-shift {
    0%,
    100% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
  }

  .animate-gradient-shift {
    background-size: 400% 400%;
    animation: gradient-shift 15s ease infinite;
  }

  /* Floating Particles */
  .particles-container {
    pointer-events: none;
  }

  .particle {
    position: absolute;
    width: 4px;
    height: 4px;
    background: rgba(255, 255, 255, 0.5);
    border-radius: 50%;
    animation: float 20s infinite linear;
  }

  .particle:nth-child(1) {
    top: 20%;
    left: 20%;
    animation-delay: 0s;
  }

  .particle:nth-child(2) {
    top: 60%;
    left: 80%;
    animation-delay: 7s;
  }

  .particle:nth-child(3) {
    top: 80%;
    left: 40%;
    animation-delay: 3s;
  }

  .particle:nth-child(4) {
    top: 40%;
    left: 60%;
    animation-delay: 10s;
  }

  .particle:nth-child(5) {
    top: 10%;
    left: 90%;
    animation-delay: 15s;
  }

  @keyframes float {
    0% {
      transform: translateY(0px) rotate(0deg);
      opacity: 0;
    }
    10% {
      opacity: 1;
    }
    90% {
      opacity: 1;
    }
    100% {
      transform: translateY(-100vh) rotate(360deg);
      opacity: 0;
    }
  }

  /* Enhanced Profile Image */
  .profile-image-container {
    position: relative;
    display: inline-block;
  }

  .profile-ring {
    position: absolute;
    inset: -8px;
    border-radius: 50%;
    background: var(--primary-gradient);
    opacity: 0.7;
    animation: pulse-ring 2s infinite;
  }

  @keyframes pulse-ring {
    0% {
      transform: scale(1);
      opacity: 0.7;
    }
    50% {
      transform: scale(1.1);
      opacity: 0.3;
    }
    100% {
      transform: scale(1);
      opacity: 0.7;
    }
  }

  .animate-float {
    animation: float-gentle 6s ease-in-out infinite;
  }

  @keyframes float-gentle {
    0%,
    100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-10px);
    }
  }

  /* Enhanced Buttons */
  .btn-primary-enhanced {
    position: relative;
    padding: 12px 32px;
    background: var(--primary-gradient);
    color: white;
    border: none;
    border-radius: 50px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    transition: all 0.3s ease;
    overflow: hidden;
    cursor: pointer;
  }

  .btn-primary-enhanced:hover {
    transform: translateY(-2px);
    box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4);
  }

  .btn-glow {
    position: absolute;
    inset: 0;
    border-radius: 50px;
    background: linear-gradient(
      45deg,
      transparent,
      rgba(255, 255, 255, 0.3),
      transparent
    );
    transform: translateX(-100%);
    transition: transform 0.6s;
  }

  .btn-primary-enhanced:hover .btn-glow {
    transform: translateX(100%);
  }

  .btn-secondary-enhanced {
    padding: 12px 32px;
    background: transparent;
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-block;
  }

  .btn-secondary-enhanced:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.6);
    transform: translateY(-2px);
  }

  /* Enhanced Social Icons */
  .social-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 50px;
    height: 50px;
    background: var(--glass-bg);
    border: 1px solid var(--card-border);
    border-radius: 50%;
    color: white;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .social-icon:hover {
    background: var(--primary-gradient);
    transform: translateY(-3px) scale(1.1);
    box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
  }

  /* Achievement Cards */
  .achievement-card {
    background: var(--glass-bg);
    border: 1px solid var(--card-border);
    border-radius: 20px;
    padding: 30px 20px;
    text-align: center;
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
  }

  .achievement-card:hover {
    transform: translateY(-5px);
    background: rgba(255, 255, 255, 0.1);
  }

  /* Skills Section */
  .skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    max-width: 1200px;
    margin: 0 auto;
  }

  .skill-card {
    background: var(--glass-bg);
    border: 1px solid var(--card-border);
    border-radius: 15px;
    padding: 25px;
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
  }

  .skill-card:hover {
    transform: translateY(-3px);
    background: rgba(255, 255, 255, 0.08);
  }

  .skill-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
  }

  .skill-name {
    color: white;
    font-weight: 600;
  }

  .skill-percentage {
    color: #667eea;
    font-weight: bold;
  }

  .skill-bar {
    height: 8px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    overflow: hidden;
  }

  .skill-progress {
    height: 100%;
    background: var(--primary-gradient);
    width: 0;
    border-radius: 10px;
    animation: fill-skill 2s ease-out forwards;
  }

  @keyframes fill-skill {
    to {
      width: var(--skill-width);
    }
  }

  /* Experience Timeline */
  .experience-timeline {
    position: relative;
    max-width: 1000px;
    margin: 0 auto;
  }

  .timeline-item {
    position: relative;
    margin-bottom: 40px;
    padding-left: 60px;
  }

  .timeline-marker {
    position: absolute;
    left: 0;
    top: 30px;
    width: 20px;
    height: 20px;
    background: var(--primary-gradient);
    border-radius: 50%;
    border: 4px solid rgba(30, 41, 59, 1);
  }

  .timeline-item:not(:last-child)::before {
    content: "";
    position: absolute;
    left: 9px;
    top: 50px;
    width: 2px;
    height: calc(100% + 20px);
    background: linear-gradient(to bottom, #667eea, transparent);
  }

  .experience-card {
    background: var(--glass-bg);
    border: 1px solid var(--card-border);
    border-radius: 20px;
    padding: 30px;
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
  }

  .experience-card:hover {
    transform: translateY(-3px);
    background: rgba(255, 255, 255, 0.08);
  }

  .experience-header {
    display: flex;
    align-items: center;
    gap: 20px;
    margin-bottom: 20px;
  }

  .experience-info {
    flex: 1;
  }

  .expand-btn {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 8px;
    border-radius: 50%;
    transition: all 0.3s ease;
  }

  .expand-btn:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .experience-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
  }

  .experience-content.expanded {
    max-height: 500px;
  }

  .technologies-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 15px;
  }

  .tech-badge {
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 500;
    color: white;
    transition: all 0.3s ease;
  }

  .tech-badge:hover {
    transform: scale(1.05);
  }

  /* Section Headers */
  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 40px;
  }

  .section-title {
    font-size: 2rem;
    font-weight: bold;
    color: white;
    background: var(--text-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .view-all-link {
    display: flex;
    align-items: center;
    gap: 8px;
    color: #667eea;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .view-all-link:hover {
    color: white;
    transform: translateX(5px);
  }

  /* Contact Section */
  .contact-card {
    background: var(--glass-bg);
    border: 1px solid var(--card-border);
    border-radius: 30px;
    padding: 60px 40px;
    backdrop-filter: blur(10px);
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
  }

  /* Enhanced Animations */
  @keyframes hero-entrance {
    0% {
      opacity: 0;
      transform: translateY(30px) scale(0.9);
    }
    100% {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .animate-hero-entrance {
    animation: hero-entrance 1.2s ease-out forwards;
  }

  @keyframes slideDown {
    from {
      transform: translateY(-30px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes slideUp {
    from {
      transform: translateY(30px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes slideIn {
    from {
      transform: translateX(-30px);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  /* Animation classes */
  .animate-fadeIn {
    animation: fadeIn 0.8s ease-out forwards;
  }

  .animate-slideDown {
    animation: slideDown 0.8s ease-out forwards;
  }

  .animate-slideUp {
    animation: slideUp 0.8s ease-out forwards;
  }

  .animate-slideIn {
    animation: slideIn 0.8s ease-out forwards;
  }

  /* Animation delays */
  .animate-delay-0 {
    animation-delay: 0s;
  }
  .animate-delay-1 {
    animation-delay: 0.2s;
  }
  .animate-delay-2 {
    animation-delay: 0.4s;
  }
  .animate-delay-3 {
    animation-delay: 0.6s;
  }
  .animate-delay-4 {
    animation-delay: 0.8s;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .section-title {
      font-size: 1.5rem;
    }

    .timeline-item {
      padding-left: 40px;
    }

    .experience-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 15px;
    }

    .skills-grid {
      grid-template-columns: 1fr;
    }
  }

  /* Scroll-based animations */
  @media (prefers-reduced-motion: no-preference) {
    .animate-on-scroll {
      opacity: 0;
      transform: translateY(30px);
      transition: all 0.6s ease;
    }

    .animate-on-scroll.in-view {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Glassmorphism effects */
  .glass-card {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 20px;
  }

  /* Text gradient utility */
  .text-gradient {
    background: var(--text-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  /* Typing animation */
  .typing-text {
    position: relative;
    overflow: hidden;
  }

  .typing-text::after {
    content: "|";
    display: inline-block;
    animation: blink 1s infinite;
    margin-left: 2px;
  }

  @keyframes blink {
    0%,
    50% {
      opacity: 1;
    }
    51%,
    100% {
      opacity: 0;
    }
  }

  /* Hover effects for cards */
  .hover-lift {
    transition:
      transform 0.3s ease,
      box-shadow 0.3s ease;
  }

  .hover-lift:hover {
    transform: translateY(-5px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
  }

  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
  }

  ::-webkit-scrollbar-thumb {
    background: var(--primary-gradient);
    border-radius: 10px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #764ba2, #667eea);
  }

  /* Loading animation for counters */
  .counter {
    font-variant-numeric: tabular-nums;
  }
</style>

<script is:inline>
  function downloadResume() {
    const resumeUrl = "/Resume.pdf";
    const link = document.createElement("a");
    link.href = resumeUrl;
    link.target = "_blank";
    link.download = "resume.pdf";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  // Enhanced experience toggle function
  function toggleExperience(index) {
    const content = document.getElementById(`content-${index}`);
    const icon = document.querySelector(
      `[onclick="toggleExperience(${index})"] svg`,
    );

    if (content.classList.contains("expanded")) {
      content.classList.remove("expanded");
      icon.style.transform = "rotate(0deg)";
    } else {
      // Close all other expanded items
      document
        .querySelectorAll(".experience-content.expanded")
        .forEach((item) => {
          item.classList.remove("expanded");
        });
      document.querySelectorAll(".expand-btn svg").forEach((icon) => {
        icon.style.transform = "rotate(0deg)";
      });

      // Open current item
      content.classList.add("expanded");
      icon.style.transform = "rotate(180deg)";
    }
  }

  // Counter animation
  function animateCounters() {
    const counters = document.querySelectorAll(".counter");

    counters.forEach((counter) => {
      const target =
        parseInt(counter.dataset.target) ||
        parseInt(counter.textContent.replace(/\D/g, ""));
      const originalText = counter.textContent;
      const isPercentage = originalText.includes("%");
      const hasPlus = originalText.includes("+");

      let current = 0;
      const increment = target / 100;

      const updateCounter = () => {
        current += increment;
        if (current < target) {
          let displayValue = Math.floor(current);
          if (isPercentage) displayValue += "%";
          if (hasPlus) displayValue += "+";
          counter.textContent = displayValue;
          requestAnimationFrame(updateCounter);
        } else {
          counter.textContent = originalText;
        }
      };

      updateCounter();
    });
  }

  // Intersection Observer for scroll animations
  function initScrollAnimations() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: "0px 0px -50px 0px",
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("in-view");

          // Trigger counter animation when achievements section is visible
          if (entry.target.classList.contains("achievements-section")) {
            animateCounters();
          }
        }
      });
    }, observerOptions);

    // Observe all sections
    document.querySelectorAll("section > div > div").forEach((section) => {
      section.classList.add("animate-on-scroll");
      observer.observe(section);
    });
  }

  // Smooth scrolling for anchor links
  function initSmoothScrolling() {
    document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
      anchor.addEventListener("click", function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute("href"));
        if (target) {
          target.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });
        }
      });
    });
  }

  // Typing animation for hero text
  function initTypingAnimation() {
    const texts = [
      "Web Developer",
      "Frontend Expert",
      "React Specialist",
      "UI/UX Enthusiast",
    ];
    const typingElement = document.querySelector(".typing-text");

    if (!typingElement) return;

    let textIndex = 0;
    let charIndex = 0;
    let isDeleting = false;

    function type() {
      const currentText = texts[textIndex];

      if (isDeleting) {
        typingElement.textContent = currentText.substring(0, charIndex - 1);
        charIndex--;
      } else {
        typingElement.textContent = currentText.substring(0, charIndex + 1);
        charIndex++;
      }

      if (!isDeleting && charIndex === currentText.length) {
        setTimeout(() => (isDeleting = true), 2000);
      } else if (isDeleting && charIndex === 0) {
        isDeleting = false;
        textIndex = (textIndex + 1) % texts.length;
      }

      setTimeout(type, isDeleting ? 50 : 100);
    }

    type();
  }

  // Parallax effect for background elements
  function initParallaxEffect() {
    window.addEventListener("scroll", () => {
      const scrolled = window.pageYOffset;
      const parallaxElements = document.querySelectorAll(".particle");

      parallaxElements.forEach((element, index) => {
        const speed = (index + 1) * 0.1;
        element.style.transform = `translateY(${scrolled * speed}px)`;
      });
    });
  }

  // Initialize all features when DOM is loaded
  document.addEventListener("DOMContentLoaded", function () {
    initScrollAnimations();
    initSmoothScrolling();
    initTypingAnimation();
    initParallaxEffect();

    // Add loading class removal after initial load
    setTimeout(() => {
      document.body.classList.add("loaded");
    }, 100);
  });

  // Enhanced hover effects for project and blog cards (if needed)
  function enhanceSliderCards() {
    // This can be used to add additional hover effects to slider items
    const sliderItems = document.querySelectorAll(".slick-slide");

    sliderItems.forEach((item) => {
      item.addEventListener("mouseenter", function () {
        this.style.transform = "translateY(-10px) scale(1.02)";
        this.style.transition = "all 0.3s ease";
      });

      item.addEventListener("mouseleave", function () {
        this.style.transform = "translateY(0) scale(1)";
      });
    });
  }

  // Call this function after sliders are initialized
  setTimeout(enhanceSliderCards, 1000);

  // Add resize handler for responsive adjustments
  window.addEventListener("resize", function () {
    // Recalculate animations or layouts if needed
    const isMobile = window.innerWidth <= 768;

    // Adjust particle animations for mobile
    const particles = document.querySelectorAll(".particle");
    particles.forEach((particle) => {
      if (isMobile) {
        particle.style.display = "none";
      } else {
        particle.style.display = "block";
      }
    });
  });

  // Performance optimization: Reduce animations on slower devices
  function optimizeForPerformance() {
    // Check if user prefers reduced motion
    const prefersReducedMotion = window.matchMedia(
      "(prefers-reduced-motion: reduce)",
    ).matches;

    if (prefersReducedMotion) {
      // Disable complex animations
      document.documentElement.style.setProperty("--animation-duration", "0s");
    }

    // Check device performance (basic heuristic)
    const isLowPerformanceDevice = navigator.hardwareConcurrency < 4;

    if (isLowPerformanceDevice) {
      // Reduce particle count
      const particles = document.querySelectorAll(".particle");
      particles.forEach((particle, index) => {
        if (index > 2) particle.style.display = "none";
      });
    }
  }

  optimizeForPerformance();
</script>
