---
import { useSanityClient, groq } from "astro-sanity";

// Move query outside component for better organization
const query = groq`*[_type == "sideBar"]{
  ...,
  sideMenus[]->
}`;

const [sideBar] = await useSanityClient().fetch(query);
---

<header class="container mx-auto sticky top-0 z-50" id="header">
  <nav class="flex flex-wrap items-center justify-between w-full md:py-3 text-primaryColor" id="navbar">
    {/* Logo Section */}
    <div class="logo-section">
      <a 
        href="/" 
        class="font-Roboto hover:shadow-xl transition-transform duration-200 transform hover:scale-105 text-white rounded-3xl text-sm p-2"
      >
        T/P
      </a>
    </div>

    {/* Mobile Menu Buttons */}
    <div class="md:hidden flex items-center">
      <button 
        id="close-button" 
        class="hidden text-primaryColor"
        aria-label="Close Menu"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>

      <button 
        id="menu-button" 
        class="text-primaryColor"
        aria-label="Open Menu"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>

    {/* Navigation Links */}
    <div class="hidden w-full md:flex md:items-center md:w-auto" id="menu">
      <ul class="pt-4 text-primaryColor md:flex md:justify-between md:pt-0">
        {sideBar?.sideMenus?.map((menuItem) => (
          <li class="transition-transform duration-200 transform hover:scale-105">
            <a 
              class="text-base font-medium font-Roboto px-5 py-1 inline-block hover:text-slate-400" 
              href={menuItem.menuLink.current}
            >
              {menuItem.menuName}
            </a>
          </li>
        ))}
      </ul>
    </div>
  </nav>
</header>

<style>
  .active-link {
    text-decoration: underline;
    text-decoration-color: rgb(107 114 128); /* gray-500 */
  }

  #header {
    transition: all 0.3s ease;
  }

  #header.transparent {
    background-color: rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(12px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
  }

  @media (max-width: 768px) {
    #menu {
      background-color: rgba(0, 0, 0, 0.9);
      backdrop-filter: blur(12px);
      padding: 1rem;
      border-radius: 0.5rem;
      margin-top: 0.5rem;
    }
  }
</style>

<script>
  // Handle scroll effects
  const header = document.getElementById("header");
  
  const toggleHeaderTransparency = () => {
    if (window.scrollY > 0) {
      header?.classList.add("transparent");
    } else {
      header?.classList.remove("transparent");
    }
  };

  window.addEventListener("scroll", toggleHeaderTransparency);

  // Mobile menu functionality
  const menuButton = document.getElementById("menu-button");
  const closeButton = document.getElementById("close-button");
  const menu = document.getElementById("menu");

  const toggleMenu = () => {
    menu?.classList.toggle("hidden");
    menuButton?.classList.toggle("hidden");
    closeButton?.classList.toggle("hidden");
  };

  menuButton?.addEventListener("click", toggleMenu);
  closeButton?.addEventListener("click", toggleMenu);

  // Close menu on window resize (if desktop size)
  window.addEventListener("resize", () => {
    if (window.innerWidth >= 768 && menu?.classList.contains("hidden")) {
      menu?.classList.remove("hidden");
      menuButton?.classList.remove("hidden");
      closeButton?.classList.add("hidden");
    }
  })